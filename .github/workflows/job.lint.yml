name: lint

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

# TODO: make cache work with windows/bash
# defaults:
#   run:
#     shell: bash -l {0}

jobs:
  lint:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python:
          - '3.8'
        platform:
          - linux-64
        lab:
          - '2.2'
        include:
          # representative platforms
          - platform: linux-64
            os: ubuntu-16.04
          # Node 14 end-of-life: April 2023
          - python: '3.8'
            nodejs: '14'

    steps:
      - uses: actions/checkout@v2

      - name: Prep lock file
        shell: bash -l {0}
        run: cp .github/conda.locks/conda.lint.${{ matrix.platform }}-${{ matrix.python }}-${{ matrix.lab }}.lock conda.lock

      - name: Cache conda
        uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key: conda-lint-${{ hashFiles('conda.lock') }}

      - name: Set up conda env
        uses: goanpeca/setup-miniconda@v1
        with:
          activate-environment: jupyterlab-lsp
          auto-activate-base: true
          auto-update-conda: false
          # TODO: remove once setup-miniconda supports conda lock files, save a minute
          environment-file: requirements/minimal.yml
          use-only-tar-bz2: true

      - name: Overwrite conda env from lockfile
        shell: bash -l {0}
        run: conda create --yes --name jupyterlab-lsp --file conda.lock

      - name: check integrity of package versions
        shell: bash -l {0}
        run: python scripts/integrity.py

      - name: Cache yarn
        uses: actions/cache@v1
        with:
          path: .yarn-packages
          key: yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-${{ runner.os }}-
            yarn-

      - name: install npm dependencies
        shell: bash -l {0}
        run: jlpm --prefer-offline --ignore-optional

      - name: lint backend
        shell: bash -l {0}
        run: python scripts/lint.py

      - name: build schema so linting can complete
        shell: bash -l {0}
        run: jlpm build:schema

      - name: lint frontend
        shell: bash -l {0}
        run: jlpm lint:check
