name: tests
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

defaults:
  run:
    shell: bash -l {0}

env:
  # Increase this value to reset all caches
  CACHE_EPOCH: 0

  PYTHONUNBUFFERED: 1
  ATEST_RETRIES: 3

  # TODO: replace once mambaforge "just works" with setup-miniconda
  MAMBAFORGE_URL:  https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge

  LINKED_EXTENSIONS: >-
    packages/lsp-ws-connection
    packages/code-jumpers
    packages/completion-theme
    packages/theme-vscode
    packages/theme-material

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        nodejs: ['>=14,<15.0.0a0']
        lab: ['>=3.0.0,<4.0.0a0']
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v2

      - uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '{'
          tokenSuffix: '}'
          files: '["requirements/github-actions.yml"]'
        env:
          lab: '${{ matrix.lab }}'
          nodejs: '${{ matrix.nodejs }}'

      - name: Cache conda
        uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key: |
            ${{ env.CACHE_EPOCH }}-${{ matrix.os }}-${{ matrix.python }}-build-${{ hashFiles('requirements/github-actions.yml') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ matrix.os }}-${{ matrix.python }}-build-

      - name: Cache yarn
        uses: actions/cache@v1
        with:
          path: .yarn-packages
          key: ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-
            ${{ env.CACHE_EPOCH }}-yarn-

      - uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '{'
          tokenSuffix: '}'
          files: '["requirements/github-actions.yml"]'
        env:
          lab: '${{ matrix.lab }}'
          nodejs: '${{ matrix.nodejs }}'

      - name: Set up Python and mamba
        uses: conda-incubator/setup-miniconda@v2
        with:
          installer-url: ${{ env.MAMBAFORGE_URL }}-Linux-x86_64.sh
          use-only-tar-bz2: true # needs to be set for caching to work properly

      - name: Install minimal build deps
        shell: bash -l {0}
        run: mamba install -n test -c conda-forge -c nodefaults setuptools 'jupyterlab${{ matrix.lab }}' 'nodejs${{ matrix.nodejs }}'

      - name: Install npm dependencies
        run: jlpm --ignore-optional --prefer-offline --frozen-lockfile

      - name: Build the extension
        run: |
          jlpm build
          jlpm bundle

      - name: Build python distributions
        run: |
          set -eux
          cd python_packages/jupyter_lsp
          python setup.py sdist bdist_wheel
          cd ../jupyterlab_lsp
          python setup.py sdist bdist_wheel

      - name: Collect distributions
        run: |
          set -eux
          mkdir dist
          cp python_packages/*/dist/* packages/*/*.tgz dist/
          cd dist
          sha256sum * > SHA256SUMS

      - name: Publish builds
        uses: actions/upload-artifact@v2
        with:
          name: jupyterlab-lsp dist ${{ github.run_number }}
          path: ./dist

  acceptance:
    runs-on: ${{ matrix.os }}-latest
    name: ${{ matrix.os }} py${{ matrix.python }} node${{ matrix.nodejs }}
    needs: [build]
    strategy:
      # TODO: maybe turn back on
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        python: [3.6, 3.7, 3.8]
        lab: ['>=3.0.0,<4.0.0a0']
        include:
          # if using 3.6, use an old node
          - python: 3.6
            # Node 10 end-of-life: April 2021
            nodejs: '>=10,<11.0.0.a0'
          # if using 3.7, use newer node, etc...
          - python: 3.7
            # Node 12 end-of-life: April 2022
            nodejs: '>=12,<13.0.0.a0'
          - python: 3.8
            # Node 14 end-of-life: April 2023
            nodejs: '>=14,<15.0.0.a0'
          # TODO: remove when mambaforge just works on setup-miniconda
          - os: ubuntu
            mambaforge: Linux-x86_64.sh
          - os: macos
            mambaforge: MacOSX-x86_64.sh
          - os: windows
            mambaforge: Windows-x86_64.exe

    steps:
      - uses: actions/checkout@v2

      - name: Set JupyterLab and Node versions
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '{'
          tokenSuffix: '}'
          files: '["requirements/github-actions.yml"]'
        env:
          lab: '${{ matrix.lab }}'
          nodejs: '${{ matrix.nodejs }}'

      - name: Cache conda
        uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key: |
            ${{ env.CACHE_EPOCH }}-${{ matrix.os }}-${{ matrix.python }}-atest-${{ hashFiles('requirements/github-actions.yml') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ matrix.os }}-${{ matrix.python }}-atest-

      - name: Set up Python and conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          installer-url: ${{ env.MAMBAFORGE_URL }}-${{ matrix.mambaforge }}
          python-version: ${{ matrix.python }}
          channel-priority: true
          environment-file: requirements/github-actions.yml
          use-only-tar-bz2: true # needs to be set for caching to work properly

      - name: Describe mamba
        shell: bash -l {0}
        run: |
          mamba info
          mamba list
          mamba config --show-sources
          mamba config --show
          printenv | sort

      - name: Cache yarn
        uses: actions/cache@v1
        with:
          path: .yarn-packages
          key: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-
            ${{ env.CACHE_EPOCH }}-yarn-

      - name: Install npm dependencies
        run: jlpm --ignore-optional --prefer-offline --frozen-lockfile

      - uses: actions/download-artifact@v2
        with:
          name: jupyterlab-lsp dist ${{ github.run_number }}
          path: ./dist

      - name: Install python packages
        run: python -m pip install --find-links=dist --no-index --ignore-installed --no-deps jupyter_lsp jupyterlab_lsp

      - name: List server extensions
        run: jupyter server extension list

      - name: List frontend extensions
        run: jupyter labextension list

      - name: Run frontend unit tests
        if: ${{ matrix.os != 'windows' }}
        run: jlpm test

      - name: Run python tests
        run: python scripts/utest.py

      - name: Run browser tests
        run: python scripts/atest.py --exclude expect:fail

      - name: Publish browser test output
        uses: actions/upload-artifact@v2
        with:
          name: ${{ job.status }} Robot ${{ matrix.os }} Python ${{ matrix.python }} ${{ github.run_number }}
          path: ./atest/output
        if: always()
