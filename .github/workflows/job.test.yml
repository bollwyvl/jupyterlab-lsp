name: Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

defaults:
  run:
    shell: bash -l {0}

env:
  # TODO extract these from files instead
  PY_JLSP_VERSION: 0.9.2
  JS_JLLSP_VERSION: 2.0.2
  JS_JLG2D_VERSION: 1.0.0

  PYTHONUNBUFFERED: 1
  ATEST_RETRIES: 3
  # TODO
  # YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

  FIRST_PARTY_LABEXTENSIONS: >-
    packages/jupyterlab-lsp/krassowski-jupyterlab-lsp-$(JS_JLLSP_VERSION).tgz

  LINKED_EXTENSIONS: >-
    packages/lsp-ws-connection
    packages/jupyterlab-go-to-definition
    packages/completion-theme
    packages/theme-vscode
    packages/theme-material

jobs:
  acceptance:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} ${{ matrix.python }}
    strategy:
      matrix:
        python: ['3.6', '3.7', '3.8']
        os: [ubuntu-16.04, macos-10.14, vs2017-win2016]
        nodejs: ['10', '13']
        lab: ['2.2']

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python and conda
        uses: goanpeca/setup-miniconda@v1
        with:
          activate-environment: jupyterlab-lsp
          auto-activate-base: true
          auto-update-conda: false
          environment-file: requirements/lock.yml
          python-version: ${{ matrix.python }}

      - name: create test env from lock file
        run: |
          conda create --yes --name jupyterlab-lsp --file .github/conda.locks/conda.${{ matrix.os }}-${{ matrix.python }}-${{ matrix.nodejs }}-${{ matrix.lab }}.lock

      - name: Install npm dependencies
        run: jlpm

      - name: Build the extension
        run: jlpm build

      - name: Build python distributions
        run: python setup.py sdist bdist_wheel

      - name: Build npm bundles
        run: jlpm lerna run bundle

      - name: Install python wheel
        run: cd dist && python -m pip install jupyter_lsp-${{ env.PY_JLSP_VERSION }}-py3-none-any.whl --no-deps

      - name: Warm up jedi cache
        run: python scripts/jedi_cache.py

      - name: Warm up tectonic cache
        run: python scripts/tectonic_cache.py

      - name: Run frontend unit tests
        run: jlpm test

      #  js_cov_packages:
      #    - jupyterlab-go-to-definition
      #    - jupyterlab-lsp

      #- task: PublishTestResults@2
      #  name: publish frontend test results
      #  inputs:
      #    testResultsFiles: packages/**/junit.xml
      #    testRunTitle: 'Jest ${{ env.name }}${{ python.name }}'
      #    mergeTestResults: true
      #  condition: always()

      #- ${{ each js_package in parameters.js_cov_packages }}:
      #    - task: PublishCodeCoverageResults@1
      #      name: 'publish ${{ js_package }} coverage'
      #      inputs:
      #        codeCoverageTool: Cobertura
      #        summaryFileLocation: 'packages/${{ js_package }}/coverage/cobertura-coverage.xml'
      #      condition: always()

      - name: List server extensions
        run: jupyter serverextension list

      - name: Run python tests
        run: python scripts/utest.py --test-run-title="Pytest ${{ matrix.os }}${{ matrix.python }}"

      - name: Install support packages
        run: jupyter labextension link --debug --no-build $(LINKED_EXTENSIONS)

      - name: Install labextensions
        run: jupyter labextension install --debug --no-build $(FIRST_PARTY_LABEXTENSIONS)

      - name: List labextensions before build
        run: jupyter labextension list

      - name: Build lab
        run: jupyter lab build --debug --dev-build=False --minimize=True

      - name: List labextensions after build
        run: jupyter labextension list

      - name: Run browser tests
        run: python scripts/atest.py --exclude expect:fail

      #- task: PublishTestResults@2
      #  name: publish browser test results
      #  inputs:
      #    testResultsFiles: atest/output/*.xunit.xml
      #    testRunTitle: 'Robot ${{ env.name }}${{ python.name }}'
      #    mergeTestResults: true
      #  condition: always()

      #- task: PublishPipelineArtifact@0
      #  name: publish browser test output
      #  inputs:
      #    targetPath: atest/output
      #    artifactName: $(Agent.JobStatus) Robot ${{ env.name }}${{ python.name }} $(Build.BuildId)
      #  condition: always()
