name: tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

# TODO: figure out how to make windows cache paths work with bash
# defaults:
#   run:
#     shell: bash -l {0}

env:
  CACHE_EPOCH: 5
  # TODO extract these from files instead
  PY_JLSP_VERSION: 0.9.2
  JS_JLLSP_VERSION: 2.0.7
  JS_JLG2D_VERSION: 1.0.0

  PYTHONUNBUFFERED: 1
  ATEST_RETRIES: 3

  LINKED_EXTENSIONS: >-
    packages/lsp-ws-connection
    packages/jupyterlab-go-to-definition
    packages/completion-theme
    packages/theme-vscode
    packages/theme-material

jobs:
  acceptance:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.platform }} py${{ matrix.python }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux-64
          - osx-64
          - win-64
        python:
          - '3.6'
          - '3.7'
          - '3.8'
        lab:
          - '2.2'
        include:
          # representative platforms
          - platform: linux-64
            os: ubuntu-16.04
          - platform: osx-64
            os: macos-10.14
          - platform: win-64
            os: vs2017-win2016
          # Node 10 end-of-life: April 2021
          - python: '3.6'
            nodejs: '10'
          # Node 12 end-of-life: April 2022
          - python: '3.7'
            nodejs: '12'
          # Node 14 end-of-life: April 2023
          - python: '3.8'
            nodejs: '14'

    steps:
      - uses: actions/checkout@v2

      - name: Prep lock file
        shell: bash -l {0}
        run: |
          cp .github/conda.locks/conda.test.${{ matrix.platform }}-${{ matrix.python }}-${{ matrix.lab }}.lock conda.lock
          cat conda.lock

      - name: Set up conda env
        uses: conda-incubator/setup-miniconda@master
        with:
          activate-environment: jupyterlab-lsp
          auto-activate-base: true
          auto-update-conda: false
          environment-file: conda.lock
          use-only-tar-bz2: True

      - name: Cache yarn
        uses: actions/cache@v2
        with:
          path: .yarn-packages
          key: yarn-${{ env.CACHE_EPOCH }}-${{ matrix.platform }}-${{ matrix.python }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-${{ env.CACHE_EPOCH }}-${{ matrix.platform }}-${{ matrix.python }}-
            yarn-${{ env.CACHE_EPOCH }}-${{ matrix.platform }}-

      - name: Install npm dependencies
        shell: bash -l {0}
        run: jlpm --offline --ignore-optional || jlpm --prefer-offline --ignore-optional

      - name: Build the extension
        shell: bash -l {0}
        run: jlpm build

      - name: Build python distributions
        shell: bash -l {0}
        run: python setup.py sdist bdist_wheel

      - name: Build npm bundles
        shell: bash -l {0}
        run: jlpm lerna run bundle

      - name: Install python wheel
        shell: bash -l {0}
        run: cd dist && python -m pip install jupyter_lsp-${{ env.PY_JLSP_VERSION }}-py3-none-any.whl --no-deps

      - name: Cache jedi cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/jedi/
            ~/Library/Caches/Jedi
            %LOCALAPPDATA%/Jedi/Jedi
          key: jedi-${{ env.CACHE_EPOCH }}-${{ matrix.platform }}-${{ matrix.python }}-${{ hashFiles('scripts/jedi_cache.py', 'conda.lock') }}
          restore-keys: |
            jedi-${{ env.CACHE_EPOCH }}-${{ matrix.platform }}-${{ matrix.python }}-

      - name: Warm up jedi cache
        shell: bash -l {0}
        run: python scripts/jedi_cache.py

      - name: Cache tectonic cache
        uses: actions/cache@v2
        with:
          # locations for: Linux, MacOS, Windows
          path: |
            ~/.cache/Tectonic
            ~/Library/Caches/Tectonic
            %LOCALAPPDATA%/TectonicProject/Tectonic
          key: tectonic-${{ env.CACHE_EPOCH }}-${{ matrix.platform }}-${{ matrix.python }}-${{ hashFiles('scripts/tectonic_cache.py', 'conda.lock') }}
          restore-keys: |
            tectonic-${{ env.CACHE_EPOCH }}-${{ matrix.platform }}-${{ matrix.python }}-

      - name: Warm up tectonic cache
        shell: bash -l {0}
        run: python scripts/tectonic_cache.py

      - name: Run frontend unit tests
        shell: bash -l {0}
        run: jlpm test

      #  js_cov_packages:
      #    - jupyterlab-go-to-definition
      #    - jupyterlab-lsp

      #- task: PublishTestResults@2
      #  name: publish frontend test results
      #  inputs:
      #    testResultsFiles: packages/**/junit.xml
      #    testRunTitle: 'Jest ${{ env.name }}${{ python.name }}'
      #    mergeTestResults: true
      #  condition: always()

      #- ${{ each js_package in parameters.js_cov_packages }}:
      #    - task: PublishCodeCoverageResults@1
      #      name: 'publish ${{ js_package }} coverage'
      #      inputs:
      #        codeCoverageTool: Cobertura
      #        summaryFileLocation: 'packages/${{ js_package }}/coverage/cobertura-coverage.xml'
      #      condition: always()

      - name: List server extensions
        shell: bash -l {0}
        run: jupyter serverextension list

      - name: Run python tests
        shell: bash -l {0}
        run: python scripts/utest.py

      - name: Install support packages
        shell: bash -l {0}
        run: jupyter labextension link --debug --no-build ${{ env.LINKED_EXTENSIONS }}

      - name: Install labextensions
        shell: bash -l {0}
        run: jupyter labextension install --debug --no-build packages/jupyterlab-lsp/krassowski-jupyterlab-lsp-${{ env.JS_JLLSP_VERSION }}.tgz

      - name: List labextensions before build
        shell: bash -l {0}
        run: jupyter labextension list

      - name: Build lab
        shell: bash -l {0}
        run: jupyter lab build --debug --dev-build=False --minimize=True

      - name: List labextensions after build
        shell: bash -l {0}
        run: jupyter labextension list

      - name: Run browser tests
        shell: bash -l {0}
        run: python scripts/atest.py --exclude expect:fail

      - name: Publish browser test output
        uses: actions/upload-artifact@v2
        with:
          name: Robot ${{ github.run_number }} ${{ job.status }} ${{ matrix.platform }} py${{ matrix.python }}
          path: ./atest/output
        if: always()
