parameters:
  platforms:
    - name: Linux
      vmImage: ubuntu-16.04
      activate: source activate
    - name: MacOSX
      vmImage: macos-10.14
      activate: source activate
    - name: Windows
      vmImage: vs2017-win2016
      activate: call activate
  pythons:
    - name: ThreeSix
      spec: '>=3.6,<3.7.0a0'
      lab: '>=2,<3.0.0a0'
      nodejs: '>=10,<11.0.0.a0'
    - name: ThreeSeven
      spec: '>=3.7,<3.8.0a0'
      lab: '>=2,<3.0.0a0'
      nodejs: '>=12,<13.0.0a0'
    - name: ThreeEight
      spec: '>=3.8,<3.9.0a0'
      lab: '>=2,<3.0.0a0'
      nodejs: '>=13,<14.0.0a0'
  js_cov_packages:
    - jupyterlab-go-to-definition
    - jupyterlab-lsp
  env_update: conda env update -n jupyterlab-lsp --file env-test.yml --quiet
  lab_link: jupyter labextension link --debug --no-build $(LINKED_EXTENSIONS)
  lab_ext: jupyter labextension install --debug --no-build $(FIRST_PARTY_LABEXTENSIONS)
  lab_build: jupyter lab build --debug --dev-build=False --minimize=True

jobs:
  - ${{ each platform in parameters.platforms }}:
      - ${{ each python in parameters.pythons}}:
          - job: ${{ platform.name }}${{ python.name }}
            pool:
              vmImage: ${{ platform.vmImage }}
            steps:
              - template: steps.conda.yml
                parameters:
                  name: ${{ platform.name }}

              - script: ${{ platform.activate }} && cd ci && python env_template.py "${{ python.spec }}" "${{ python.lab }}" "${{ python.nodejs }}"
                displayName: generate env with python, lab, and nodejs version

              - script: ${{ parameters.env_update }} || ${{ parameters.env_update }} || ${{ parameters.env_update }}
                displayName: update conda environment with test dependencies

              - script: conda info && conda list -n jupyterlab-lsp
                displayName: list conda packages and info

              - script: ${{ platform.activate }} jupyterlab-lsp && jlpm || jlpm || jlpm
                displayName: install npm dependencies

              - script: ${{ platform.activate }} jupyterlab-lsp && jlpm build
                displayName: build typescript

              - script: ${{ platform.activate }} jupyterlab-lsp && python setup.py sdist bdist_wheel
                displayName: build python distributions

              - script: ${{ platform.activate }} jupyterlab-lsp && jlpm lerna run bundle
                displayName: build npm bundles

              - script: ${{ platform.activate }} jupyterlab-lsp && cd dist && python -m pip install jupyter_lsp-$(PY_JLSP_VERSION)-py3-none-any.whl --no-deps
                displayName: install python wheel

              - script: ${{ platform.activate }} jupyterlab-lsp && jlpm test
                displayName: run frontend unit tests

              - task: PublishTestResults@2
                displayName: publish frontend test results
                inputs:
                  testResultsFiles: packages/**/junit.xml
                  testRunTitle: 'Jest ${{ platform.name }}${{ python.name }}'
                  mergeTestResults: true
                condition: always()

              - ${{ each js_package in parameters.js_cov_packages }}:
                  - task: PublishCodeCoverageResults@1
                    displayName: 'publish ${{ js_package }} coverage'
                    inputs:
                      codeCoverageTool: Cobertura
                      summaryFileLocation: 'packages/${{ js_package }}/coverage/cobertura-coverage.xml'
                    condition: always()

              - script: ${{ platform.activate }} jupyterlab-lsp && jupyter kernelspec list
                displayName: list kernels

              - script: ${{ platform.activate }} jupyterlab-lsp && jupyter lsp kernelspec install
                displayName: install kernel

              - script: ${{ platform.activate }} jupyterlab-lsp && jupyter kernelspec list
                displayName: list kernels (again)

              - script: ${{ platform.activate }} jupyterlab-lsp && python scripts/utest.py --test-run-title="Pytest ${{ platform.name }}${{ python.name }}"
                displayName: run python tests

              - script: ${{ platform.activate }} jupyterlab-lsp && ${{ parameters.lab_link }} || ${{ parameters.lab_link }} || ${{ parameters.lab_link }}
                displayName: install support packages

              - script: ${{ platform.activate }} jupyterlab-lsp && ${{ parameters.lab_ext }} || ${{ parameters.lab_ext }} || ${{ parameters.lab_ext }}
                displayName: install labextensions

              - script: ${{ platform.activate }} jupyterlab-lsp && jupyter labextension list
                displayName: list labextensions before build

              - script: ${{ platform.activate }} jupyterlab-lsp && ${{ parameters.lab_build }} || ${{ parameters.lab_build }} || ${{ parameters.lab_build }}
                displayName: build lab

              - script: ${{ platform.activate }} jupyterlab-lsp && jupyter labextension list
                displayName: list labextensions after build

              - script: ${{ platform.activate }} jupyterlab-lsp && python scripts/atest.py
                displayName: run browser tests

              - task: PublishTestResults@2
                displayName: publish browser test results
                inputs:
                  testResultsFiles: atest/output/*.xunit.xml
                  testRunTitle: 'Robot ${{ platform.name }}${{ python.name }}'
                  mergeTestResults: true
                condition: always()

              - task: PublishPipelineArtifact@0
                displayName: publish browser test output
                inputs:
                  targetPath: atest/output
                  artifactName: $(Agent.JobStatus) Robot ${{ platform.name }}${{ python.name }} $(Build.BuildId)
                condition: always()
