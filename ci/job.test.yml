parameters:
  platforms:
    - name: Linux
      vmImage: ubuntu-16.04
      activate: source activate
    - name: MacOSX
      vmImage: macos-10.13
      activate: source activate
    - name: Windows
      vmImage: vs2017-win2016
      activate: call activate
  pythons:
    - name: ThreeSix
      spec: '>=3.6,<3.7.0a0'
    - name: ThreeSeven
      spec: '>=3.7,<3.8.0a0'

jobs:
  - ${{ each platform in parameters.platforms }}:
      - ${{ each python in parameters.pythons}}:
          - job: ${{ platform.name }}${{ python.name }}
            pool:
              vmImage: ${{ platform.vmImage }}
            steps:
              - template: steps.conda.yml
                parameters:
                  name: ${{ platform.name }}

              - script: ${{ platform.activate }} && cd ci && python env_template.py "${{ python.spec }}"
                displayName: update environment with python version

              - script: conda env update -n jupyterlab-lsp --file env-test.yml --quiet
                displayName: update conda environment with test dependencies

              - script: conda info && conda list -n jupyterlab-lsp
                displayName: list conda packages and info

              - task: CacheBeta@0
                inputs:
                  key: yarn | $(Agent.OS) | yarn.lock
                  path: $(YARN_CACHE_FOLDER)
                displayName: restore cached yarn packages

              - script: ${{ platform.activate }} jupyterlab-lsp && jlpm
                displayName: install npm dependencies

              - script: ${{ platform.activate }} jupyterlab-lsp && jlpm build
                displayName: build typescript

              - script: ${{ platform.activate }} jupyterlab-lsp && python setup.py sdist bdist_wheel
                displayName: build python distributions

              - script: ${{ platform.activate }} jupyterlab-lsp && cd dist && npm pack ..
                displayName: build npm bundle

              - script: ${{ platform.activate }} jupyterlab-lsp && cd dist && python -m pip install jupyter_lsp-$(JLSP_VERSION)-py3-none-any.whl --no-deps
                displayName: install python wheel

              - script: ${{ platform.activate }} jupyterlab-lsp && jlpm tslint:check && jlpm test:jest
                displayName: run frontend unit tests

              - task: PublishTestResults@2
                displayName: publish frontend test results
                inputs:
                  testResultsFiles: junit.xml
                condition: always()

              - script: ${{ platform.activate }} jupyterlab-lsp && jupyter serverextension list
                displayName: list server extensions

              - script: ${{ platform.activate }} jupyterlab-lsp && python scripts/utest.py
                displayName: run python tests

              - script: ${{ platform.activate }} jupyterlab-lsp && cd dist && jupyter labextension install krassowski-jupyterlab-lsp-$(JLSP_VERSION).tgz @krassowski/jupyterlab_go_to_definition
                displayName: build lab

              - script: ${{ platform.activate }} jupyterlab-lsp && jupyter labextension list
                displayName: list labextensions

              - script: ${{ platform.activate }} jupyterlab-lsp && python scripts/atest.py
                displayName: run browser tests

              - task: PublishTestResults@2
                displayName: publish browser test results
                inputs:
                  testResultsFiles: atest/output/*.xunit.xml
                condition: always()

              - task: PublishPipelineArtifact@0
                displayName: publish browser test output
                inputs:
                  targetPath: atest/output
                  artifactName: Robot ${{ platform.name }}${{ python.name }}
                condition: always()
